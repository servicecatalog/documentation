<?xml version="1.0" encoding="UTF-8"?>  
<!-- Copyright FUJITSU ENABLING SOFTWARE TECHNOLOGY GMBH 2021 -->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
                         "concept.dtd">
<concept id="Preparing_Shell_Scripts_60" xml:lang="en-us">
    <title>Preparing Shell Scripts</title>
    <conbody>
        <section>
            <ul compact="no">
                <li>The Shell scripts to be executed by the Shell service controller must exist. They need to be prepared by the technology provider organization responsible for the Shell service controller and are referenced from the marketable services defined by the supplier organization. </li>
                <li>The scripts may be located on the Docker host where <ph
                        conref="../../Shared/Product_Name.xml#ProductNameTopic/Product_Abbr"
                            /> is deployed, or on an external system (external URL). <p>Scripts located on the <ph
                            conref="../../Shared/Product_Name.xml#ProductNameTopic/Product_Abbr"
                        /> Docker host need to be provided in the following directory: </p><p><codeph>&lt;docker>/config/oscm-app/scripts</codeph></p><p><codeph>&lt;docker></codeph> is the <ph
                            conref="../../Shared/Product_Name.xml#ProductNameTopic/Product_Abbr"
                        /> data directory (shared file system) specified at installation time.</p><p>Whenever you provide new scripts or change existing ones, you must restart the <codeph>oscm-app</codeph> container. This automatically makes the scripts available within the container in the <codeph>/opt/scripts</codeph> directory, which is mounted to the <codeph>&lt;docker>/config/oscm-app/scripts</codeph> directory. </p><p><image
                            href="../_images/RunningEnv.png" alt="RunningEnv.png" width="400" height="171"/></p></li>
                <li>The Shell service controller will execute the scripts stored on the shared file system as the same UNIX user who runs the <codeph>oscm-app</codeph> container.</li>
            </ul>
        </section>
        <section>
            <title>Shell Script Syntax and Rules</title>
            <p>In order to execute properly, the Shell scripts must follow some rules. </p>
            <p><b>Script Types</b></p>
            <p>The Shell controller supports standard UNIX shell (<codeph>.sh</codeph>) scripts as well as PowerShell scripts (<codeph>.ps1</codeph>) scripts.</p>
            <p><b>Return JSON Object</b></p>
            <p>Each script must return <b>exactly one JSON object</b> followed by an <codeph>"END_OF_SCRIPT"</codeph> string value. In this way, the Shell service controller can determine that a script has finished successfully. Otherwise the script execution will run into a timeout.</p>
            <p>The JSON result may contain the following <b>keywords and elements</b>:</p><ul compact="no">
                    <li><codeph>status</codeph> (mandatory) - allowed values: <codeph>"ok"</codeph> or <codeph>"error"</codeph></li>
                    <li><codeph>message</codeph> (mandatory) - information for users about the script execution.</li>
                    <li><codeph>usageData</codeph> (optional) - expected as the result of the execution of a usage data script. It contains the following JSON keywords and elements:<ul
                            compact="no">
                            <li><codeph>eventId</codeph> - the ID of a billable event as defined in the technical service definition. Sample service definitions with events are available on GitHub under <xref
                                href="https://github.com/servicecatalog/oscm-app-shell/tree/master/src/main/resources"
                                scope="external"
                                    ><u>https://github.com/servicecatalog/oscm-app-shell/tree/master/src/main/resources</u></xref>.</li>
                            <li><codeph>multiplier</codeph> - the number of occurrences of an event. Instead of recording the same event each time it occurs, you can record it only once and set the multiplier to the number of occurrences.Â The billing services consider the multiplier. For example, one event with a multiplier of 2 is handled in the same way as 2 events of the same type, if both events occur in the same billing period.</li>
                        </ul></li>
                    <li><codeph>data</codeph> (optional) - any data which can be output in the status information of a subscription after the script has been executed. See <xref
                        href="c_ConfigureStatusPanel.xml"
                        /> for details on how to configure the status information for subscriptions. You can include the following JSON keywords and elements in a <codeph>data</codeph> element: <ul
                        compact="no">
                        <li><codeph>output</codeph> - any data to be presented, for example, HTML data for the status script. </li>
                        <li><codeph>accessInfo</codeph> - access information to be passed to the subscription details for display. </li>
                        <li><codeph>name</codeph> - any temporary data.</li>
                        <li><codeph>id</codeph> - any ID. </li>
                    </ul></li>
                <li><codeph>parameters</codeph> (optional) - any parameters with their values that are to be persisted for later use by other scripts. A <codeph>parameters</codeph> element may contain any number of parameters defined as key/value pairs:<ul
                        compact="no">
                        <li><codeph>key</codeph> - the key of the parameter to be persisted.</li>
                        <li><codeph>value</codeph> - the value of the parameter to be persisted.</li>
                    </ul>Other scripts can reference a parameter by <codeph>$SCRIPT_&lt;key></codeph>, where <codeph>&lt;key></codeph> is the parameter's key. For example, a provisioning script may return the ID of a new virtual machine in the <codeph>VMID</codeph> parameter. This virtual machine can later be addressed in other scripts (update, operation, etc.) using <codeph>$SCRIPT_VMID</codeph>.</li>
                </ul>
            <p><b>Special Characters</b></p><p>Special characters used in scripts must be properly escaped.</p>
            <p><b>Sample Scripts</b></p><p>Sample scripts are available on GitHub under <xref format="html"
                    href="https://github.com/servicecatalog/oscm-app-shell/tree/master/src/main/resources/sample_scripts"
                    scope="external"
                        ><u>https://github.com/servicecatalog/oscm-app-shell/tree/master/src/main/resources/sample_scripts</u></xref>.</p>
        </section>
    </conbody>
</concept>
